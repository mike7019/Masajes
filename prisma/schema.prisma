// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Servicio {
  id          String      @id @default(cuid())
  nombre      String
  descripcion String
  duracion    Int         // minutos
  precio      Decimal
  activo      Boolean     @default(true)
  reservas    Reserva[]
  promociones Promocion[]
  creadoEn    DateTime    @default(now())

  @@map("servicios")
}

model Promocion {
  id          String   @id @default(cuid())
  nombre      String
  descripcion String
  descuento   Decimal  // porcentaje de descuento
  fechaInicio DateTime
  fechaFin    DateTime
  activa      Boolean  @default(true)
  servicios   Servicio[]
  creadaEn    DateTime @default(now())

  @@map("promociones")
}

model Reserva {
  id              String             @id @default(cuid())
  clienteNombre   String
  clienteEmail    String
  clienteTelefono String
  servicio        Servicio           @relation(fields: [servicioId], references: [id])
  servicioId      String
  fechaHora       DateTime
  estado          EstadoReserva      @default(PENDIENTE)
  notas           String?
  creadaEn        DateTime           @default(now())
  historial       ReservaHistorial[]

  @@map("reservas")
}

model ReservaHistorial {
  id        String   @id @default(cuid())
  reserva   Reserva  @relation(fields: [reservaId], references: [id], onDelete: Cascade)
  reservaId String
  accion    String   // CREADA, EDITADA, CANCELADA, COMPLETADA, etc.
  detalles  String   // Descripción detallada del cambio
  usuario   String   // Email o nombre del usuario que realizó el cambio
  creadoEn  DateTime @default(now())

  @@map("reserva_historial")
}

model Disponibilidad {
  id         String  @id @default(cuid())
  diaSemana  Int     // 0-6 (domingo-sábado)
  horaInicio String
  horaFin    String
  activo     Boolean @default(true)

  @@map("disponibilidad")
}

model HorarioBloqueado {
  id          String   @id @default(cuid())
  fechaInicio DateTime
  fechaFin    DateTime
  motivo      String
  descripcion String?
  activo      Boolean  @default(true)
  creadoEn    DateTime @default(now())

  @@map("horarios_bloqueados")
}

enum EstadoReserva {
  PENDIENTE
  CONFIRMADA
  CANCELADA
  COMPLETADA
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For credentials login
  role          UserRole  @default(ADMIN)
  activo        Boolean   @default(true)
  creadoEn      DateTime  @default(now())
  
  accounts Account[]
  sessions Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

enum UserRole {
  ADMIN
  MANAGER
}